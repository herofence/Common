# 公用编译核心
name: main

on:
  workflow_call:
    inputs:
      FIRENAME:
        required: true
        type: string
      FIRENAME1:
        required: true
        type: string
      REPO_URL:
        required: true
        type: string
      REPO_BRANCH:
        required: true
        type: string
      UPLOAD_RELEASE:
        required: true
        type: string

env:
  FIRENAME: ${{inputs.FIRENAME}}
  FIRENAME1: ${{inputs.FIRENAME1}}
  REPO_URL: ${{inputs.REPO_URL}}
  REPO_BRANCH: ${{inputs.REPO_BRANCH}}
  UPLOAD_RELEASE: ${{inputs.UPLOAD_RELEASE}}

jobs:
  builds:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: 检查服务器配置
      run: |
        echo "已知CPU型号（降序）：7763,8370C,8272CL,8171M,E5系列"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo -e "$(df -hT)"
    - name: 清理系统
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true
    - name: 搭建编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo -E apt-get -y full-upgrade
        sudo -E apt-get -y install $(cat scripts/apt)
        sudo -E systemctl daemon-reload
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
        sudo apt-get install -y gcc-13
        sudo apt-get install -y g++-13
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 60 --slave /usr/bin/g++ g++ /usr/bin/g++-13
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo -E timedatectl set-timezone "Asia/Shanghai"
    - name: 拉取源码及配置
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        wget --no-check-certificate https://github.com/herofence/Common/blob/main/Scripts/diy.sh https://github.com/herofence/Common/blob/main/Config/General_TC.txt
        chmod +x diy.sh ${{ env.FIRENAME }}.config
    - name: 缓存
      id: cache
      uses: stupidloud/cachewrtbuild@main
      with:
        skip_saving: 'true'
        ccache: 'true'
        mixkey: '${{ env.FIRENAME1 }}'
        prefix: '${{ github.workspace }}/openwrt'
    - name: 自定义配置
      run: |
        [ -e diy.sh ] && mv -f diy.sh openwrt
        cd openwrt && . diy.sh
    - name: 下载软件包
      run: |
        [ -e ${{ env.FIRENAME }}.config ] && mv -f ${{ env.FIRENAME }}.config openwrt/.config
        cd openwrt
        make defconfig
        make download -j16
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: 编译
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$[`nproc`+1] || make -j1 V=s
        echo "compile=success" >> $GITHUB_ENV
    - name: 检查剩余空间
      if: always()
      run: | 
        echo "--------------------------硬盘信息--------------------------"
        echo -e "$(df -hT)"
        rm -rf openwrt/build_dir openwrt/staging_dir openwrt/tmp openwrt/dl openwrt/package openwrt/feeds
    - name: armv8打包镜像
      if: env.compile == 'success' && env.FIRENAME1 == 'armv8'
      uses: unifreq/openwrt_packit@master
      env:
        OPENWRT_ARMVIRT: openwrt/bin/targets/armvirt/64/*.tar.gz
        KERNEL_VERSION_NAME: 5.15.2_6.1.2
        OPENWRT_VER: R"$(date +%y.%m.%d)"
        WHOAMI: Bin
        DISTRIB_DESCRIPTION: OP
    - name: 整理编译文件
      if: env.compile == 'success'
      run: |
        if [ "$FIRENAME" = "jx64" ];then
          rm -rf openwrt/bin/targets/x86/64/packages
          echo "PACKAGED_OUTPUTPATH=openwrt/bin/targets/x86/64" >> $GITHUB_ENV
        elif [ "$FIRENAME" = "lx64" ];then
          bin1=openwrt/bin/targets/x86/64
          mkdir -p bin2 && cp -r $bin1/* bin2
          rm -rf $bin1/*.gz bin2/packages
          tar -zcvf bin.tar.gz openwrt/bin
          cp bin.tar.gz bin2
          echo "PACKAGED_OUTPUTPATH=bin2" >> $GITHUB_ENV
        elif [ "$FIRENAME" = "jarmv8" ];then
          cp openwrt/bin/targets/armvirt/64/config.buildinfo ${{ env.PACKAGED_OUTPUTPATH }}
        elif [ "$FIRENAME" = "larmv8" ];then
          cp openwrt/bin/targets/armvirt/64/config.buildinfo ${{ env.PACKAGED_OUTPUTPATH }}
          rm -rf openwrt/bin/targets/armvirt/64/*.tar.gz
          tar -zcvf bin.tar.gz openwrt/bin
          cp bin.tar.gz ${{ env.PACKAGED_OUTPUTPATH }}
        fi
    - name: 发布release
      if: env.UPLOAD_RELEASE == 'true' && env.compile == 'success'
      uses: ncipollo/release-action@main
      with:
        name: ${{ env.DATE }} 🚀 ${{ env.FIRENAME2 }} | 自动编译
        allowUpdates: true
        removeArtifacts: true
        tag: ${{ env.FIRENAME3 }}
        commit: master
        token: ${{ secrets.RELEASES_TOKEN }}
        body: |
          ${{ env.Info }}
        artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
    - name: 微信推送
      if: always()
      run: |
        if [ "${{ env.compile }}" = "success" ];then
          curl -H "Content-Type:application/json" -X POST -d '{"token":"${{ secrets.PUSHBOT }}","title":"${{ env.FIRENAME2 }}编译成功","content":"${{ env.FIRENAME2 }}编译成功B","template":"json"}' http://www.pushplus.plus/send
        else 
          curl -H "Content-Type:application/json" -X POST -d '{"token":"${{ secrets.PUSHBOT }}","title":"${{ env.FIRENAME2 }}编译失败","content":"${{ env.FIRENAME2 }}编译失败B","template":"json"}' http://www.pushplus.plus/send
        fi
